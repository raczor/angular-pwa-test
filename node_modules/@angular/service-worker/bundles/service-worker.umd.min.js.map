{"version":3,"sources":["packages/service-worker/service-worker.umd.js"],"names":["global","factory","exports","module","require","define","amd","ng","serviceWorker","common","core","rxjs","operators","this","__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","ERR_SW_NOT_SUPPORTED","NgswCommChannel","controllerChanges","fromEvent","pipe","map","controller","currentController","defer","of","controllerWithChanges","concat","worker","filter","c","registration","switchMap","getRegistration","events","event","data","publish","connect","errorObservable","message","throwError","Error","postMessage","action","payload","take","tap","sw","toPromise","then","postMessageWithStatus","type","nonce","waitForStatus","Promise","all","generateNonce","Math","round","random","eventsOfType","nextEventOfType","status","defineProperty","get","enumerable","configurable","SwPush","subscriptionChanges","Subject","isEnabled","messages","NEVER","subscription","pushManager","workerDrivenSubscriptions","pm","getSubscription","sub","merge","requestSubscription","options","_this","reject","pushOptions","userVisibleOnly","key","atob","serverPublicKey","replace","applicationServerKey","Uint8Array","ArrayBuffer","charCodeAt","subscribe","next","unsubscribe","success","decorators","Injectable","ctorParameters","SwUpdate","available","activated","checkForUpdate","statusNonce","activateUpdate","RegistrationOptions","SCRIPT","InjectionToken","ngswAppInitializer","injector","script","platformId","app","ApplicationRef","isPlatformBrowser","navigator","enabled","whenStable","isStable","stable","addEventListener","register","scope","ngswCommChannelFactory","opts","undefined","ServiceWorkerModule","ngModule","providers","provide","useValue","useFactory","deps","PLATFORM_ID","APP_INITIALIZER","Injector","multi","NgModule","args","ɵangular_packages_service_worker_service_worker_e","ɵangular_packages_service_worker_service_worker_a","ɵangular_packages_service_worker_service_worker_b","ɵangular_packages_service_worker_service_worker_c","ɵangular_packages_service_worker_service_worker_d","value"],"mappings":"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","sourcesContent":["/**\n * @license Angular v6.0.3\n * (c) 2010-2018 Google, Inc. https://angular.io/\n * License: MIT\n */\n\n(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/common'), require('@angular/core'), require('rxjs/operators'), require('rxjs')) :\n\ttypeof define === 'function' && define.amd ? define('@angular/service-worker', ['exports', '@angular/common', '@angular/core', 'rxjs/operators', 'rxjs'], factory) :\n\t(factory((global.ng = global.ng || {}, global.ng.serviceWorker = {}),global.ng.common,global.ng.core,global.rxjs.operators,global.rxjs));\n}(this, (function (exports,common,core,operators,rxjs) { 'use strict';\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\n\r\n\r\nvar __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n};\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar ERR_SW_NOT_SUPPORTED = 'Service workers are disabled or not supported by this browser';\nfunction errorObservable(message) {\n    return rxjs.defer(function () { return rxjs.throwError(new Error(message)); });\n}\n/**\n * @experimental\n*/\nvar NgswCommChannel = /** @class */ (function () {\n    function NgswCommChannel(serviceWorker) {\n        this.serviceWorker = serviceWorker;\n        if (!serviceWorker) {\n            this.worker = this.events = this.registration = errorObservable(ERR_SW_NOT_SUPPORTED);\n        }\n        else {\n            var controllerChangeEvents = (rxjs.fromEvent(serviceWorker, 'controllerchange'));\n            var controllerChanges = (controllerChangeEvents.pipe(operators.map(function () { return serviceWorker.controller; })));\n            var currentController = (rxjs.defer(function () { return rxjs.of(serviceWorker.controller); }));\n            var controllerWithChanges = (rxjs.concat(currentController, controllerChanges));\n            this.worker = (controllerWithChanges.pipe(operators.filter(function (c) { return !!c; })));\n            this.registration = (this.worker.pipe(operators.switchMap(function () { return serviceWorker.getRegistration(); })));\n            var rawEvents = rxjs.fromEvent(serviceWorker, 'message');\n            var rawEventPayload = rawEvents.pipe(operators.map(function (event) { return event.data; }));\n            var eventsUnconnected = (rawEventPayload.pipe(operators.filter(function (event) { return !!event && !!event['type']; })));\n            var events = eventsUnconnected.pipe(operators.publish());\n            this.events = events;\n            events.connect();\n        }\n    }\n    /**\n     * @internal\n     */\n    /**\n       * @internal\n       */\n    NgswCommChannel.prototype.postMessage = /**\n       * @internal\n       */\n    function (action, payload) {\n        return this.worker\n            .pipe(operators.take(1), operators.tap(function (sw) {\n            sw.postMessage(__assign({ action: action }, payload));\n        }))\n            .toPromise()\n            .then(function () { return undefined; });\n    };\n    /**\n     * @internal\n     */\n    /**\n       * @internal\n       */\n    NgswCommChannel.prototype.postMessageWithStatus = /**\n       * @internal\n       */\n    function (type, payload, nonce) {\n        var waitForStatus = this.waitForStatus(nonce);\n        var postMessage = this.postMessage(type, payload);\n        return Promise.all([waitForStatus, postMessage]).then(function () { return undefined; });\n    };\n    /**\n     * @internal\n     */\n    /**\n       * @internal\n       */\n    NgswCommChannel.prototype.generateNonce = /**\n       * @internal\n       */\n    function () { return Math.round(Math.random() * 10000000); };\n    /**\n     * @internal\n     */\n    // TODO(i): the typings and casts in this method are wonky, we should revisit it and make the\n    // types flow correctly\n    /**\n       * @internal\n       */\n    // TODO(i): the typings and casts in this method are wonky, we should revisit it and make the\n    // types flow correctly\n    NgswCommChannel.prototype.eventsOfType = /**\n       * @internal\n       */\n    // TODO(i): the typings and casts in this method are wonky, we should revisit it and make the\n    // types flow correctly\n    function (type) {\n        return this.events.pipe(operators.filter(function (event) { return event.type === type; }));\n    };\n    /**\n     * @internal\n     */\n    // TODO(i): the typings and casts in this method are wonky, we should revisit it and make the\n    // types flow correctly\n    /**\n       * @internal\n       */\n    // TODO(i): the typings and casts in this method are wonky, we should revisit it and make the\n    // types flow correctly\n    NgswCommChannel.prototype.nextEventOfType = /**\n       * @internal\n       */\n    // TODO(i): the typings and casts in this method are wonky, we should revisit it and make the\n    // types flow correctly\n    function (type) {\n        return (this.eventsOfType(type).pipe(operators.take(1)));\n    };\n    /**\n     * @internal\n     */\n    /**\n       * @internal\n       */\n    NgswCommChannel.prototype.waitForStatus = /**\n       * @internal\n       */\n    function (nonce) {\n        return this.eventsOfType('STATUS')\n            .pipe(operators.filter(function (event) { return event.nonce === nonce; }), operators.take(1), operators.map(function (event) {\n            if (event.status) {\n                return undefined;\n            }\n            throw new Error((event.error));\n        }))\n            .toPromise();\n    };\n    Object.defineProperty(NgswCommChannel.prototype, \"isEnabled\", {\n        get: function () { return !!this.serviceWorker; },\n        enumerable: true,\n        configurable: true\n    });\n    return NgswCommChannel;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Subscribe and listen to push notifications from the Service Worker.\n *\n * @experimental\n */\nvar SwPush = /** @class */ (function () {\n    function SwPush(sw) {\n        this.sw = sw;\n        this.subscriptionChanges = new rxjs.Subject();\n        if (!sw.isEnabled) {\n            this.messages = rxjs.NEVER;\n            this.subscription = rxjs.NEVER;\n            return;\n        }\n        this.messages = this.sw.eventsOfType('PUSH').pipe(operators.map(function (message) { return message.data; }));\n        this.pushManager = this.sw.registration.pipe(operators.map(function (registration) { return registration.pushManager; }));\n        var workerDrivenSubscriptions = this.pushManager.pipe(operators.switchMap(function (pm) { return pm.getSubscription().then(function (sub) { return sub; }); }));\n        this.subscription = rxjs.merge(workerDrivenSubscriptions, this.subscriptionChanges);\n    }\n    Object.defineProperty(SwPush.prototype, \"isEnabled\", {\n        /**\n         * Returns true if the Service Worker is enabled (supported by the browser and enabled via\n         * ServiceWorkerModule).\n         */\n        get: /**\n           * Returns true if the Service Worker is enabled (supported by the browser and enabled via\n           * ServiceWorkerModule).\n           */\n        function () { return this.sw.isEnabled; },\n        enumerable: true,\n        configurable: true\n    });\n    SwPush.prototype.requestSubscription = function (options) {\n        var _this = this;\n        if (!this.sw.isEnabled) {\n            return Promise.reject(new Error(ERR_SW_NOT_SUPPORTED));\n        }\n        var pushOptions = { userVisibleOnly: true };\n        var key = atob(options.serverPublicKey.replace(/_/g, '/').replace(/-/g, '+'));\n        var applicationServerKey = new Uint8Array(new ArrayBuffer(key.length));\n        for (var i = 0; i < key.length; i++) {\n            applicationServerKey[i] = key.charCodeAt(i);\n        }\n        pushOptions.applicationServerKey = applicationServerKey;\n        return this.pushManager.pipe(operators.switchMap(function (pm) { return pm.subscribe(pushOptions); }), operators.take(1))\n            .toPromise()\n            .then(function (sub) {\n            _this.subscriptionChanges.next(sub);\n            return sub;\n        });\n    };\n    SwPush.prototype.unsubscribe = function () {\n        var _this = this;\n        if (!this.sw.isEnabled) {\n            return Promise.reject(new Error(ERR_SW_NOT_SUPPORTED));\n        }\n        var unsubscribe = this.subscription.pipe(operators.switchMap(function (sub) {\n            if (sub !== null) {\n                return sub.unsubscribe().then(function (success) {\n                    if (success) {\n                        _this.subscriptionChanges.next(null);\n                        return undefined;\n                    }\n                    else {\n                        throw new Error('Unsubscribe failed!');\n                    }\n                });\n            }\n            else {\n                throw new Error('Not subscribed to push notifications.');\n            }\n        }));\n        return unsubscribe.pipe(operators.take(1)).toPromise();\n    };\n    SwPush.decorators = [\n        { type: core.Injectable }\n    ];\n    /** @nocollapse */\n    SwPush.ctorParameters = function () { return [\n        { type: NgswCommChannel, },\n    ]; };\n    return SwPush;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Subscribe to update notifications from the Service Worker, trigger update\n * checks, and forcibly activate updates.\n *\n * @experimental\n */\nvar SwUpdate = /** @class */ (function () {\n    function SwUpdate(sw) {\n        this.sw = sw;\n        if (!sw.isEnabled) {\n            this.available = rxjs.NEVER;\n            this.activated = rxjs.NEVER;\n            return;\n        }\n        this.available = this.sw.eventsOfType('UPDATE_AVAILABLE');\n        this.activated = this.sw.eventsOfType('UPDATE_ACTIVATED');\n    }\n    Object.defineProperty(SwUpdate.prototype, \"isEnabled\", {\n        /**\n         * Returns true if the Service Worker is enabled (supported by the browser and enabled via\n         * ServiceWorkerModule).\n         */\n        get: /**\n           * Returns true if the Service Worker is enabled (supported by the browser and enabled via\n           * ServiceWorkerModule).\n           */\n        function () { return this.sw.isEnabled; },\n        enumerable: true,\n        configurable: true\n    });\n    SwUpdate.prototype.checkForUpdate = function () {\n        if (!this.sw.isEnabled) {\n            return Promise.reject(new Error(ERR_SW_NOT_SUPPORTED));\n        }\n        var statusNonce = this.sw.generateNonce();\n        return this.sw.postMessageWithStatus('CHECK_FOR_UPDATES', { statusNonce: statusNonce }, statusNonce);\n    };\n    SwUpdate.prototype.activateUpdate = function () {\n        if (!this.sw.isEnabled) {\n            return Promise.reject(new Error(ERR_SW_NOT_SUPPORTED));\n        }\n        var statusNonce = this.sw.generateNonce();\n        return this.sw.postMessageWithStatus('ACTIVATE_UPDATE', { statusNonce: statusNonce }, statusNonce);\n    };\n    SwUpdate.decorators = [\n        { type: core.Injectable }\n    ];\n    /** @nocollapse */\n    SwUpdate.ctorParameters = function () { return [\n        { type: NgswCommChannel, },\n    ]; };\n    return SwUpdate;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar RegistrationOptions = /** @class */ (function () {\n    function RegistrationOptions() {\n    }\n    return RegistrationOptions;\n}());\nvar SCRIPT = new core.InjectionToken('NGSW_REGISTER_SCRIPT');\nfunction ngswAppInitializer(injector, script, options, platformId) {\n    var initializer = function () {\n        var app = injector.get(core.ApplicationRef);\n        if (!(common.isPlatformBrowser(platformId) && ('serviceWorker' in navigator) &&\n            options.enabled !== false)) {\n            return;\n        }\n        var whenStable = app.isStable.pipe(operators.filter(function (stable) { return !!stable; }), operators.take(1)).toPromise();\n        // Wait for service worker controller changes, and fire an INITIALIZE action when a new SW\n        // becomes active. This allows the SW to initialize itself even if there is no application\n        // traffic.\n        navigator.serviceWorker.addEventListener('controllerchange', function () {\n            if (navigator.serviceWorker.controller !== null) {\n                navigator.serviceWorker.controller.postMessage({ action: 'INITIALIZE' });\n            }\n        });\n        // Don't return the Promise, as that will block the application until the SW is registered, and\n        // cause a crash if the SW registration fails.\n        whenStable.then(function () { return navigator.serviceWorker.register(script, { scope: options.scope }); });\n    };\n    return initializer;\n}\nfunction ngswCommChannelFactory(opts, platformId) {\n    return new NgswCommChannel(common.isPlatformBrowser(platformId) && opts.enabled !== false ? navigator.serviceWorker :\n        undefined);\n}\n/**\n * @experimental\n */\nvar ServiceWorkerModule = /** @class */ (function () {\n    function ServiceWorkerModule() {\n    }\n    /**\n     * Register the given Angular Service Worker script.\n     *\n     * If `enabled` is set to `false` in the given options, the module will behave as if service\n     * workers are not supported by the browser, and the service worker will not be registered.\n     */\n    /**\n       * Register the given Angular Service Worker script.\n       *\n       * If `enabled` is set to `false` in the given options, the module will behave as if service\n       * workers are not supported by the browser, and the service worker will not be registered.\n       */\n    ServiceWorkerModule.register = /**\n       * Register the given Angular Service Worker script.\n       *\n       * If `enabled` is set to `false` in the given options, the module will behave as if service\n       * workers are not supported by the browser, and the service worker will not be registered.\n       */\n    function (script, opts) {\n        if (opts === void 0) { opts = {}; }\n        return {\n            ngModule: ServiceWorkerModule,\n            providers: [\n                { provide: SCRIPT, useValue: script },\n                { provide: RegistrationOptions, useValue: opts },\n                {\n                    provide: NgswCommChannel,\n                    useFactory: ngswCommChannelFactory,\n                    deps: [RegistrationOptions, core.PLATFORM_ID]\n                },\n                {\n                    provide: core.APP_INITIALIZER,\n                    useFactory: ngswAppInitializer,\n                    deps: [core.Injector, SCRIPT, RegistrationOptions, core.PLATFORM_ID],\n                    multi: true,\n                },\n            ],\n        };\n    };\n    ServiceWorkerModule.decorators = [\n        { type: core.NgModule, args: [{\n                    providers: [SwPush, SwUpdate],\n                },] }\n    ];\n    /** @nocollapse */\n    ServiceWorkerModule.ctorParameters = function () { return []; };\n    return ServiceWorkerModule;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// This file only reexports content of the `src` folder. Keep it that way.\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexports.ɵangular_packages_service_worker_service_worker_e = NgswCommChannel;\nexports.ɵangular_packages_service_worker_service_worker_a = RegistrationOptions;\nexports.ɵangular_packages_service_worker_service_worker_b = SCRIPT;\nexports.ɵangular_packages_service_worker_service_worker_c = ngswAppInitializer;\nexports.ɵangular_packages_service_worker_service_worker_d = ngswCommChannelFactory;\nexports.ServiceWorkerModule = ServiceWorkerModule;\nexports.SwPush = SwPush;\nexports.SwUpdate = SwUpdate;\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=service-worker.umd.js.map\n"]}